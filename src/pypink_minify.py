#!/usr/bin/env python3
exec("""\nru, en = 'ru', 'en'\n\nimport os, platform\nfrom random import choice\ntry:\n    import atexit\nexcept ImportError:\n    raise ImportError('Library "atexit" isn\'t installed.')\nclass main_error(Exception):\n    def __init__(self, pass_on_error: bool = True, *args) -> None:\n        self.pass_on_error, self._called_args = pass_on_error, args\nclass runtime_error(main_error): pass\nclass import_error(main_error): pass\nclass code_error(main_error): pass\nclass env_error(main_error): pass\n\nclass EmptyStringError(main_error): pass\nclass InvalidStringError(main_error): pass\nclass InvalidStringType(main_error): pass\nclass UnsupportedStringType(main_error): pass\nclass TooManyNotStringsInString(main_error): pass\n\nclass env:\n    env_list = ['none.temporary-env-file']\n    def __init__(self, *args) -> None: self._call_args = args\n    def create(self = None, name = None, file = None, value = '', *args) -> None:\n        if value == '' or name == '' or file == '' or value == None or name == None or file == None:\n            raise env_error('env.create: env name / value / file name cannot be empty\nvalues: {NAME:"'+str(name)+'",FILE:"'+str(file)+'",VALUE:"'+str(value)+'"}')\n        else:\n            if not name in env.env_list and not file in env.env_list and not file + '.temporary-env-file' in env.env_list:\n                with open(file + '.temporary-env-file', 'w') as File:\n                    File.write(str(name).replace('\n',''))\n                    File.write('\n'+str(value).replace('\n',''))\n                    File.close()\n                env.env_list.append(file + '.temporary-env-file')\n            else:\n                raise env_error('env.create: env name / file name have been already declared\nvalues: {NAME:"'+str(name)+'",FILE_NAME:"'+str(file)+'"}')\nclass __pypink__:\n    def __init__(self, *args) -> None: self._call_args = args\n    def exit_handler(self):\n        try:\n            for get_env in env.env_list:\n                try: os.remove(get_env)\n                except BaseException as e: continue\n        except BaseException as e: return e\n__pypink__ = __pypink__()\natexit._clear()\natexit.register(__pypink__.exit_handler)\n\ndef get_args(*args): return args\ndef clear_console(cross_platform: bool = True, *args):\n    if cross_platform == True: os.system('clear || cls || :')\n    else: return os.system('clear') if os.name.lower() == 'posix' else os.system('cls')\ndef capitalize(string = None, *args):\n    if not is_empty(string): return string.capitalize()\n    else: return False\ndef is_empty(string = None, *args): return ((not string) or string == '' or (not str(string).strip().lower()))\ndef platform_name(): return str(platform.system()).lower()\ndef pip_install(lib: str, *args):\n    lib = str(lib)\n    if not is_empty(lib):\n        if platform_name() == 'windows': os.system('py -m ensurepip --upgrade || cls; pip install ' + lib)\n        else: os.system('python -m ensurepip --upgrade || clear; pip install ' + lib)\n    else: return False\ndef crop_string(string: str = '', symbol: str = '', *args):\n    if type(string).__name__ == 'str' or type(symbol).__name__ == 'str':\n        if is_empty(string) or is_empty(string):\n            raise EmptyStringError('Excepted str, instead got '+str('NoneType with empty input'))\n        else:\n            Splitted_List = string.split(str(symbol))\n            return Splitted_List\n        if not stringmngr_is_string(string): raise InvalidStringError('Excepted str, instead got ' + stringmngr_get_string_type(string))\n        elif not stringmngr_is_string(symbol): raise InvalidStringError('Excepted str, instead got ' + stringmngr_get_string_type(symbol))\n        else:\n            if stringmngr_is_string(string) or stringmngr_is_string(symbol):\n                pass\n            else:\n                raise code_error('Unexpected error: expected str, instead got NoneType and got invalid input type')\ndef llama_sh(command = 'echo "llama_sh v.1.0.0"', *args):\n    try:\n        if str(type(command).__name__) == 'str':\n            os.system(str(command))\n        else:\n            raise UnsupportedStringType('Excepted str, instead got '+str(type(command).__name__))\n    except TypeError:\n        raise TooManyNotStringsInString('Got too many invalid strings')\ndef pr(s: str = '', no_newline: bool = False, *args) -> None:\n    if raw: s = ''.join(r'{}'.format(s))\n    if s and stringmngr_is_string(s):\n        print(s, end = '' if no_newline else '\n')\n    else:\n        raise ValueError('Excepted "str".type, instead got "{}.type"; use str() or \'quotes\' converter instead'.format(stringmngr_get_string_type(s)))\ndef is_from_blacklist(string, blacklist, *args): return (string in blacklist)\ndef random_string(length = 0, custom_strings_list = [], *args):\n    string = ''\n    strings_list = alphabet()\n    if len(custom_strings_list) <= 0:\n        for x in range(length): string += choice(strings_list)\n    else:\n        for x in range(length): string += choice(custom_strings_list)\n    return string\ndef custom_raise(raise_class = runtime_error, raise_description = '', exit_after = True, exit_code = 0, *args):\n    try:\n        print('The current program "'+str(get_program_name())+'" raises an error: ')\n        print('   pypink.raise(){')\n        print('   [          '+str(raise_class.__name__)+',')\n        if not is_empty(str(raise_description)):\n            print('   [          '+str(raise_description)+',')\n        else: print('   ][')\n        print(']}')\n        if exit_after:\n            try: exit(int(exit_code))\n            except BaseException: return False\n    except BaseException as e: err_crashed(code = e, confirmation = True)\ndef get_program_name(*args):\n    return str(os.path.basename(__file__))\ndef err_crashed(code: str = '', confirmation: bool = False, exit_: bool = True, *NoneArgs_pass):\n    if confirmation and str(confirmation).strip().lower():\n        print('\033[0;31mpypink.Error: Crashed; "'+str(code)+str('"')+'\033[0m')\n        if exit_: exit()\ndef alphabet(lang = en, upper: bool = True, *args):\n    l_en = 'abcdefghijklmnopqrstuvwxyz'\n    l_ru = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'\n    if upper:\n        l_en += l_en.upper()\n        l_ru += l_ru.upper()\n    l_en = list(l_en)\n    l_ru = list(l_ru)\n    return l_en if lang == en else l_ru\ndef stringmngr_is_string(string, *args): return stringmngr_is_stype(string, 'str')\ndef stringmngr_is_int(string, *args): return stringmngr_is_stype(string, 'int')\ndef stringmngr_is_float(string, *args): return stringmngr_is_stype(string, 'float')\ndef stringmngr_is_stype(string, is_type, *args): return stringmngr_get_string_type(string) == is_type\ndef stringmngr_get_string_type(string, *args): return str(type(string).__name__)""")
